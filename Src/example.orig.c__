/**
 ******************************************************************************
 * @file       example.c
 * @date       01/10/2014 12:00:00
 * @brief      Example functions for the X-NUCLEO-IHM02A1
 ******************************************************************************
 *
 * COPYRIGHT(c) 2014 STMicroelectronics
 *
 * Redistribution and use in source and binary forms, with or without modification,
 * are permitted provided that the following conditions are met:
 *   1. Redistributions of source code must retain the above copyright notice,
 *      this list of conditions and the following disclaimer.
 *   2. Redistributions in binary form must reproduce the above copyright notice,
 *      this list of conditions and the following disclaimer in the documentation
 *      and/or other materials provided with the distribution.
 *   3. Neither the name of STMicroelectronics nor the names of its contributors
 *      may be used to endorse or promote products derived from this software
 *      without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
 * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
 * CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
 * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
 * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 *
 ******************************************************************************
 */

#include "main.h"
#include "example.h"
#include "example_usart.h"
#include "params.h"
#include "xnucleoihm02a1_interface.h"
#include "xnucleoihm02a1.h"

extern TIM_HandleTypeDef htim2;
extern uint8_t TIM2_AWAITING_UPDATE_EVENT;
/**
 * @addtogroup MicrosteppingMotor_Example
 * @{
 */

/**
 * @addtogroup Example
 * @{
 */

/**
 * @defgroup   ExamplePrivateFunctions
 * @brief      Example Private Functions.
 * @{
 */

uint16_t BSP_ST1S14_PGOOD(void);
uint32_t usrPow(uint8_t base, uint8_t exponent);

/**
 * @}
 */ /* End of ExamplePrivateFunctions */

/**
 * @addtogroup ExamplePrivateFunctions
 * @brief      Example Private Functions.
 * @{
 */

/**
 * @addtogroup ExampleExportedFunctions
 * @brief      Example Exported Functions.
 * @{
 */

/**
 * @brief  Example no.1 for X-NUCLEO-IHM02A1.
 * @note	Perform a complete motor axis revolution as MPR_1 equal movements,
 *			for each L6470 mounted on all stacked X-NUCLEO-IHM02A1.
 *			At the end of each movement there is a delay of DELAY_1 ms.
 *     	After each motor has performed a complete revolution there is a
 *			delay of DELAY_2 ms.
 *			Now all motors for each X-NUCLEO-IHM02A1 will start at the same
 *			time.
 *			They are going to run at INIT_SPEED for DELAY_3 ms.
 *			After that all motors for each X-NUCLEO-IHM02A1 will get a HardStop
 *			at the same time.
 *			Perform a complete motor axis revolution as MPR_2 equal movements,
 *			for each L6470 mounted on all stacked X-NUCLEO-IHM02A1.
 *			At the end of each movement there is a delay of DELAY_1 ms.
 *			After that all motors for each X-NUCLEO-IHM02A1 will get a HardHiZ
 *			at the same time.
 */
void MicrosteppingMotor_Example_01(void)
{
#define MPR_1     4			  //!< Motor Movements Per Revolution 1st option
#define MPR_2     8			  //!< Motor Movements Per Revolution 2nd option
#define DELAY_1   1000		//!< Delay time 1st option
#define DELAY_2   2500		//!< Delay time 2nd option
#define DELAY_3   10000   //!< Delay time 3rd option

	uint32_t Speed;
//	uint8_t MovementPerRevolution;
	uint8_t board=0;
	uint8_t device;

	StepperMotorBoardHandle_t *StepperMotorBoardHandle;
	MotorParameterData_t *MotorParameterDataGlobal, *MotorParameterDataSingle;

#ifdef NUCLEO_USE_USART
	USART_Transmit(&huart2, (uint8_t *)"Initial values for registers:\r\n");
	USART_PrintAllRegisterValues();
#endif

	/* Setup each X-NUCLEO-IHM02A1 Expansion Board ******************************/

	/*
typedef struct {
  float     motorvoltage;           //!< motor supply voltage in V
  float     fullstepsperrevolution; //!< min number of steps per revolution for the motor
  float     phasecurrent;           //!< max motor phase voltage in A
  float     phasevoltage;           //!< max motor phase voltage in V

  float     speed;                  //!< motor initial speed [step/s]
  float     acc;                    //!< motor acceleration [step/s^2] (comment for infinite acceleration mode)
  float     dec;                    //!< motor deceleration [step/s^2] (comment for infinite deceleration mode)
  float     maxspeed;               //!< motor maximum speed [step/s]
  float     minspeed;               //!< motor minimum speed [step/s]

  float     fsspd;                  //!< motor full-step speed threshold [step/s]
  float     kvalhold;               //!< holding kval [V]
  float     kvalrun;                //!< constant speed kval [V]
  float     kvalacc;                //!< acceleration starting kval [V]
  float     kvaldec;                //!< deceleration starting kval [V]
  float     intspeed;               //!< intersect speed for bemf compensation curve slope changing [step/s]
  float     stslp;                  //!< start slope [s/step]
  float     fnslpacc;               //!< acceleration final slope [s/step]
  float     fnslpdec;               //!< deceleration final slope [s/step]
  uint8_t   kterm;                  //!< thermal compensation factor (range [0, 15])
  float     ocdth;                  //!< ocd threshold [ma] (range [375 ma, 6000 ma])
  float     stallth;                //!< stall threshold [ma] (range [31.25 ma, 4000 ma])
  uint8_t   step_sel;               //!< step mode selection
  uint8_t   alarmen;                //!< alarm conditions enable
  uint16_t  config;                 //!< ic configuration
}MotorParameterData_t;
	 const MotorParameterData_t MotorParameterInitData[EXPBRD_MOUNTED_NR_MAX][L6470DAISYCHAINSIZE] = {
  {
    {9.0, 400, 1.7, 3.06, \
    240.0, 400.0, 400.0, 320.0, 0.0, \
    602.7, 3.06, 3.06,\
      3.06, 3.06, 61.52, 392.1569e-6, 643.1372e-6, 643.1372e-6, 0,\
        3.06*1000*1.10, 3.06*1000*1.00, MICROSTEP_1_128, 0xFF, 0x2E88},
    {9.0, 400, 1.7, 3.06, 240.0, 400.0, 400.0, 320.0, 0.0, 602.7, 3.06, 3.06,\
      3.06, 3.06, 61.52, 392.1569e-6, 643.1372e-6, 643.1372e-6, 0,\
        3.06*1000*1.10, 3.06*1000*1.00, MICROSTEP_1_128, 0xFF, 0x2E88},
  }, ...
	 */

	/* Get the parameters for the motor connected with the 1st stepper motor driver of the 1st stepper motor expansion board */
	MotorParameterDataGlobal = GetMotorParameterInitData();

	StepperMotorBoardHandle = BSP_GetExpansionBoardHandle(0);
	MotorParameterDataSingle = MotorParameterDataGlobal;
	StepperMotorBoardHandle->Config(MotorParameterDataSingle);

#ifdef NUCLEO_USE_USART
	USART_Transmit(&huart2, (uint8_t *)"Custom values for registers:\r\n");
	USART_PrintAllRegisterValues();
#endif

	/****************************************************************************/

//	MovementPerRevolution = MPR_1;
	printf("Max Speed : %f [step/s]\n", MotorParameterDataSingle->maxspeed);
	printf("Min Speed : %f [step/s]\n", MotorParameterDataSingle->minspeed);

	for (device = L6470_ID(0); device <= L6470_ID(1); device++)
	{
		//		/* Get the parameters for the motor connected with the actual stepper motor driver of the actual stepper motor expansion board */
		//		MotorParameterDataSingle = MotorParameterDataGlobal+(device);
		//		N_STEPS = ((uint32_t)MotorParameterDataSingle->fullstepsperrevolution * usrPow(2, MotorParameterDataSingle->step_sel)) / MovementPerRevolution;
		//
		//		/* Prepare the stepper driver to be ready to perform the Move command
		//		 * which produces a motion of N_STEPS microsteps */
		//		StepperMotorBoardHandle->StepperMotorDriverHandle[device]->Command->PrepareMove(device, DIR, N_STEPS*device+N_STEPS);

		/* Set Speed */
		float speed = MotorParameterDataSingle->maxspeed*(1.+(float)device)/2.*0.1;
		Speed = Step_s_2_Speed(speed);
		printf("L6470_ID(%d) Speed : %f [step/s]  ==> %lu\n", device, speed, Speed);


		/* Prepare the stepper driver to be ready to perform the Run command which produces a motion at fixed speed.
		 * The speed value is in (([step/s] * 250e-9) / 2^-28) unit */
		StepperMotorBoardHandle->StepperMotorDriverHandle[device]->Command->PrepareRun(device, L6470_DIR_FWD_ID, Speed);
	}

	StepperMotorBoardHandle->Command->PerformPreparedApplicationCommand();


	//HAL_Delay(DELAY_2);
	/*
	 * PSC=8399    84e6/8.4e3=10e3=10000
	 * 84MHz/(PSC+1)= 10000 Hz --> T=1e-4 s
	 * 10000s = 1e8 * T = 99 999 999+1
	 * 10s    = 1e5 * T = 99999+1
	 */
	// TIM2->CCR1= 99999999;
	__HAL_TIM_SET_AUTORELOAD(&htim2, 99999);
	HAL_TIM_Base_Start_IT(&htim2);
	TIM2_AWAITING_UPDATE_EVENT=1;
    while (TIM2_AWAITING_UPDATE_EVENT){ ; }
    HAL_TIM_Base_Stop_IT(&htim2);

//	HAL_Delay(10000);

	for (device = L6470_ID(0); device <= L6470_ID(1); device++)
	{
		/* Prepare the stepper driver to be ready to perform the HardStop command
		 * which causes an immediate motor stop with infinite deceleration */
		StepperMotorBoardHandle->StepperMotorDriverHandle[device]->Command->PrepareHardStop(device);
	}

	StepperMotorBoardHandle->Command->PerformPreparedApplicationCommand();

	for (device = L6470_ID(0); device <= L6470_ID(1); device++)
	{
		while(StepperMotorBoardHandle->Command->CheckStatusRegisterFlag(board, device, BUSY_ID) == 0);
	}

//	for (device = L6470_ID(0); device <= L6470_ID(1); device++)
//	{
//		//		/* Get the parameters for the motor connected with the actual stepper motor driver of the actual stepper motor expansion board */
//		//		MotorParameterDataSingle = MotorParameterDataGlobal+(device);
//		//		N_STEPS = ((uint32_t)MotorParameterDataSingle->fullstepsperrevolution * usrPow(2, MotorParameterDataSingle->step_sel)) / MovementPerRevolution;
//		//
//		//		/* Prepare the stepper driver to be ready to perform the Move command
//		//		 * which produces a motion of N_STEPS microsteps */
//		//		StepperMotorBoardHandle->StepperMotorDriverHandle[device]->Command->PrepareMove(device, DIR, N_STEPS*device+N_STEPS);
//
//		/* Set Speed */
//		float speed = MotorParameterDataSingle->maxspeed*(1.+(float)device)/2.*0.1;
//		Speed = Step_s_2_Speed(speed);
//		printf("L6470_ID(%d) Speed : %f [step/s]  ==> %lu\n", device, speed, Speed);
//
//
//		/* Prepare the stepper driver to be ready to perform the Run command which produces a motion at fixed speed.
//		 * The speed value is in (([step/s] * 250e-9) / 2^-28) unit */
////		StepperMotorBoardHandle->StepperMotorDriverHandle[device]->Command->PrepareRun(device, L6470_DIR_REV_ID, Speed);
//		StepperMotorBoardHandle->StepperMotorDriverHandle[device]->Command->PrepareGoTo(device, 100000*(device+1));
////		StepperMotorBoardHandle->StepperMotorDriverHandle[device]->Command->PrepareGoUntil(device, L6470_ACT_CPY_ID, L6470_DIR_FWD_ID, Speed);
//	}
//
//	StepperMotorBoardHandle->Command->PerformPreparedApplicationCommand();
//
//	for (device = L6470_ID(0); device <= L6470_ID(1); device++)
//	{
//		while(StepperMotorBoardHandle->Command->CheckStatusRegisterFlag(board, device, BUSY_ID) == 0);
//	}
//
//	//HAL_Delay(DELAY_2);
//	HAL_Delay(1000);
//
//	for (device = L6470_ID(0); device <= L6470_ID(1); device++)
//	{
//		/* Prepare the stepper driver to be ready to perform the HardStop command
//		 * which causes an immediate motor stop with infinite deceleration */
//		StepperMotorBoardHandle->StepperMotorDriverHandle[device]->Command->PrepareHardStop(device);
//	}
//
//	StepperMotorBoardHandle->Command->PerformPreparedApplicationCommand();
//
//	for (device = L6470_ID(0); device <= L6470_ID(1); device++)
//	{
//		while(StepperMotorBoardHandle->Command->CheckStatusRegisterFlag(board, device, BUSY_ID) == 0);
//	}

	HAL_Delay(DELAY_3);


	for (device = L6470_ID(0); device <= L6470_ID(1); device++)
	{
		/* Prepare the stepper driver to be ready to perform the GoHome command */
		StepperMotorBoardHandle->StepperMotorDriverHandle[device]->Command->PrepareGoHome(device);
	}

	StepperMotorBoardHandle->Command->PerformPreparedApplicationCommand();

	for (device = L6470_ID(0); device <= L6470_ID(1); device++)
	{
		while(StepperMotorBoardHandle->Command->CheckStatusRegisterFlag(board, device, BUSY_ID) == 0);
	}

	//HAL_Delay(DELAY_3);

	for (device = L6470_ID(0); device <= L6470_ID(1); device++)
	{
		/* Prepare the stepper driver to be ready to perform the HardStop command
		 * which causes an immediate motor stop with infinite deceleration */
		StepperMotorBoardHandle->StepperMotorDriverHandle[device]->Command->PrepareHardStop(device);
	}

	StepperMotorBoardHandle->Command->PerformPreparedApplicationCommand();

	for (device = L6470_ID(0); device <= L6470_ID(1); device++)
	{
		/* Prepare the stepper driver to be ready to perform the HardHiZ command
		 * immediately disables the power bridges (high impedance state). */
		StepperMotorBoardHandle->StepperMotorDriverHandle[device]->Command->PrepareHardHiZ(device);
	}

	StepperMotorBoardHandle->Command->PerformPreparedApplicationCommand();

	/* Switch on the user LED */
	BSP_LED_On(LED2);
}

/**
 * @}
 */ /* End of ExampleExportedFunctions */

/**
 * @brief  This function return the ADC conversion result about the ST1S14 PGOOD.
 * @retval PGOOD The number into the range [0, 4095] as [0, 3.3]V.
 * @note   It will just return 0 if USE_ST1S14_PGOOD is not defined.
 */
uint16_t BSP_ST1S14_PGOOD(void)
{
#ifdef USE_ST1S14_PGOOD
	HAL_ADC_Start(&HADC);
	HAL_ADC_PollForConversion(&HADC, 100);

	return HAL_ADC_GetValue(&HADC);
#else
	return 0;
#endif
}

/**
 * @brief  Calculates the power of a number.
 * @param  base      the base
 * @param  exponent  the exponent
 * @retval power     the result as (base^exponent)
 * @note   There is not OVF control.
 */
uint32_t usrPow(uint8_t base, uint8_t exponent)
{
	uint8_t i;
	uint32_t power = 1;

	for (i=0; i<exponent; i++)
		power *= base;

	return power;
}

/**
 * @brief  EXTI line detection callbacks.
 * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
 * @retval None
 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
	switch (GPIO_Pin)
	{
	case GPIO_PIN_13:
		BSP_EmergencyStop();
		break;
	case L6470_nBUSY_SYNC_Pin:
		BSP_L6470_BusySynchEventManager();
		break;
	case L6470_nFLAG_Pin:
		BSP_L6470_FlagEventManager();
		break;
	}
}

/**
 * @}
 */ /* End of ExamplePrivateFunctions */

/**
 * @}
 */ /* End of Example */

/**
 * @}
 */ /* End of MicrosteppingMotor_Example */

/************************ (C) COPYRIGHT STMicroelectronics *****END OF FILE****/
